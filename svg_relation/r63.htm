<!DOCTYPE html>
<html>
<head>
    <title></title>
    <style>
		.icon{
			background-image:url(../svg/server.png);
			width:45px;
			height:45px;
		}
		.icon1{
			background-image:url(../svg/et.png);
			width:45px;
			height:45px;
		}
		.icon2{
			background-image:url(../svg/deploy.png);
			width:45px;
			height:45px;
		}
		.icon3{
			background-image:url(../svg/connect.png);
			width:45px;
			height:45px;
		}
		.icon4{
			background-image:url(../svg/vsp.png);
			width:45px;
			height:45px;
		}
		.icon5{
			background-image:url(../svg/add.png);
			width:20px;
			height:20px;
		}
		.disable_text_highlighting {
			-webkit-touch-callout: none;
			-webkit-user-select: none; /* Webkit */
			-moz-user-select: none;    /* Firefox */
			-ms-user-select: none;     /* IE 10  */
			/* Currently not supported in Opera but will be soon */
			-o-user-select: none;
			user-select: none;
		}
    </style>
	<script src="../jquery/jquery-2.0.0.min.js"></script>
<script>
	var _svg_d=document;
	var _wc=8;
	var _d=document;
	var data={
		lstyle:"fill:white;stroke:#ddd;stroke-width:3",
		shaSingle:true,
		sha:{
			w:13,
			h:13
		},
		bg:"#eee",
		border:"2px solid #ddd",
		borderRadius: "5px",
		borderWidth: 2,
		adjustWidth: 6,
		lmode:2,
		zIndex:1,
		w:120,
		h:60,
		iconWidth:50,
		buttonHight:30,
		buttonWidth:100,
		buttonPadding:2,
		containerWidth:180,
		containerHeight:500,
		containerMargginX:10,
		containerMargginY:10,
		containerMargginGap:10,
		containerPaddingY:60,
		containerPaddingGap:20,
		containerList:[
			{title:"Virtual Application Component:"},
			{title:"Rules / Policies:"}
		],
		isFix:true,
		isDrag:true,
		isDragShadow:true,
		isAjustAutoX:true,
		isAjustAutoY:true,
		typelist:[
			{
				isOnlyIcon:false,
				iconClass:"icon"
			},
			{
				isOnlyIcon:false,
				iconClass:"icon1"
			},
			{
				isOnlyIcon:false,
				iconClass:"icon2"
			},
			{
				isOnlyIcon:false,
				iconClass:"icon3"
			},
			{
				isOnlyIcon:false,
				iconClass:"icon4"
			},
			{
				isOnlyIcon:true,
				iconClass:"icon5"
			}
		],
		list:[
		{
			id:"s3",
			typeid:2,
			title:"Deploy1",
			x:500,
			y:70,
			houseid:0
			},
		{
			id:"s4",
			typeid:2,
			title:"Deploy2",
			x:500,
			y:70,
			houseid:0
			},
		{
			id:"s41",
			typeid:2,
			title:"Deploy3",
			x:500,
			y:70,
			houseid:0
			},
		{
			id:"s42",
			typeid:2,
			title:"Deploy4",
			x:500,
			y:70,
			houseid:0
			},
		{
			id:"s6",
			typeid:4,
			title:"Joe's Dev Env1",
			x:680,
			y:70,
			houseid:1
			},
		{
			id:"s7",
			typeid:4,
			title:"Joe's Dev Env2",
			x:680,
			y:70,
			houseid:1
			},
		{
			id:"s71",
			typeid:4,
			title:"Joe's Dev Env3",
			x:680,
			y:70,
			houseid:1
			},
		{
			id:"s72",
			typeid:4,
			title:"Joe's Dev Env4",
			x:680,
			y:70,
			houseid:1
			}
		],
		listmap:{}
	};
	function _remove_node(id){
		var obj=null;
		data.list=_map(data.list,function(o){
			if(o.id!=id){
				return true;
			}else{
				obj=o;
				return false;
			}
		});
		return obj;
	}
	function _get_class(object) {
		return Object.prototype.toString.call(object).match(/^\[object\s(.*)\]$/)[1];
	}
	function _is_number(val) {
		return _get_class(val) === 'Number';
	}
	function _is_array(val) {
		return _get_class(val) === 'Array';
	}
	function _is_boolean(val) {
		return _get_class(val) === 'Boolean';
	}
	function _is_undefine(val) {
		return _get_class(val) === 'Undefined';
	}
	function _each(a,f){
		if(_is_array(a)) for(var i=0;i<a.length;i++) f(a[i],i);
	}
	function _map(a,f){
		var arr=[];
		if(_is_array(a)) for(var i=0;i<a.length;i++){
			if(f(a[i],i)){
				arr.push(a[i]);
			}
		}
		return arr;
	}
	function _drag(o){
		if(!o.isDrag) return;
		var oh=o.n||o.oh;
		oh.onmousedown=function(e){
			var x=e.layerX,y=e.layerY;
			oh.setCapture();
			_d.onmousemove=function(e){
				draw(o,e.pageX-x,e.pageY-y);
				updataReordPosing(o)
			};
			_d.onmouseup=function(){
				oh.releaseCapture();
				_d.onmousemove=_d.onmouseup=null;
				updataReordPos(o);
				destroy();
				init();
			};
		};
	}
	function _dragShadow(o){
		if(!o.isDragShadow) return;
		var oh=o.sha.n||o.oh;
		oh.onmousedown=function(e){
			var x=e.layerX,y=e.layerY;
			oh.setCapture();
			_d.onmousemove=function(e){
				drawShadow(o,e.pageX-x,e.pageY-y);
			};
			_d.onmouseup=function(){
				oh.releaseCapture();
				_d.onmousemove=_d.onmouseup=null;
				make_new_line(o);
				destroy();
				init();
			};
		};
	}
	function addBody(node){
		var pn=_d.getElementById("my");
		pn.appendChild(node);
	}
	function createTuodFlag(o){
		if(!data.nTuod){
			data.nTuod=$('<div></div>')[0];
			$(data.nTuod).css({position:"absolute",width:data.w+"px",height:data.containerPaddingGap+"px",backgroundColor:"black"});
			$("#my").append(data.nTuod);
		}
		$(data.nTuod).css({left:o.x+"px",top:(o.y+o.h)+"px"});
	}
	function updataReordPos(oo){
		var a=[];
		var aa=[];
		var o=null;
		_each(data.list,function(item){
			if(item != oo){
				a.push(item);
			}
			aa.push(item);
		});
		var b=[];
		var flag=true;
		_each(a,function(item){
			if( flag && oo.y > item.y && oo.y<(item.y+item.h) && oo.houseid==item.houseid){
				b.push(item);
				b.push(oo);
				flag=false;
			}else{
				b.push(item);
			}
		});
		if(flag){
			data.list=aa;
		}else{
			data.list=b;
		}
	}
	function updataReordPosing(oo){
		_each(data.list,function(item){
			if(item==oo) return;
			if( oo.y > item.y && oo.y<(item.y+item.h) && oo.houseid==item.houseid){
				createTuodFlag(item);
			}
		});
	}
	function _drawContainer(o){
		if(!o.n){
			o.n=_d.createElement("div");
			addBody(o.n);
		}    
		var sty=o.n.style;
		sty.position = "absolute";
		sty.left = o.x+"px";
		sty.top = o.y+"px";
		sty.width = o.w+"px";
		sty.height = o.h+"px";
		sty.zIndex = -1;
		//sty.background = "#FEF5ED";
		sty.border = "2px solid #FDEADA";
		o.x2=o.x+o.w;
		o.y2=o.y+o.h;
		o.n.innerHTML=o.title;
		o.autoy=data.containerPaddingY;
	}
	function _drawElement(o){
		if(!o.n){
			var typeObj=data.typelist[o.typeid];
			o.n=_d.createElement("div");    
			if(typeObj.isOnlyIcon){
				var left=_d.createElement("div");
				left.className=typeObj.iconClass;
				o.n.appendChild(left);
			}else{
				var wrap=_d.createElement("div");
				o.n.appendChild(wrap);
				o.wrap=wrap;
				var wrapButton=_d.createElement("div");
				o.n.appendChild(wrapButton);
				o.wrapButton=wrapButton;
				wrapButton.align="right";
				var layout=_d.createElement("div");
				layout.className="layout";
				wrap.appendChild(layout);
					var left=_d.createElement("div");
					left.style="float:left;";
					left.className=typeObj.iconClass;
					layout.appendChild(left);
					var right=_d.createElement("div");
					right.style="padding-left:"+data.iconWidth+"px";
					layout.appendChild(right);
					right.innerHTML=o.title;
					right.className="disable_text_highlighting";
				var sty=o.wrap.style;
				sty.width = o.w+"px";
				sty.height = o.h+"px";
				sty.background = o.bg;
				sty.border = o.border;
				sty.borderRadius = o.borderRadius;
				if(o.isBranch){
					_each(o.to,function(item){
						var n=_d.createElement("div");
						var sty=n.style;
						sty.width = data.buttonWidth+"px";
						sty.height = data.buttonHight+"px";
						sty.background = o.bg;
						sty.border = o.border;
						sty.borderRadius = o.borderRadius;
						sty.marginTop=data.buttonPadding+"px";
						n.innerHTML=item.title;
						o.wrapButton.appendChild(n);
						item.n=n;
					});
				}
			}
			addBody(o.n);
		}
		var sty=o.n.style;
		sty.position = "absolute";
		sty.left = o.x+"px";
		sty.top = o.y+"px";
		sty.zIndex = o.zIndex;
		_each(o.to,function(item){
			if(!item.nline){
				item.nline=_createline();
			}
		});
	}
	function _createline(){
			var group=_svg_d.getElementById("group");
			var node=_svg_d.createElementNS("http://www.w3.org/2000/svg","path");
			group.appendChild(node);
			return node;
	}
	function _drawElementShadow(o){
		if(!o.sha.n){
			var typeObj=data.typelist[o.typeid];
			var node=_d.createElement("div");
			o.sha.n=node;
			if(typeObj.isOnlyIcon){
				var left=_d.createElement("div");
				left.className=typeObj.iconClass;
				node.appendChild(left);
			}else{
				var wrap=_d.createElement("div");
				node.appendChild(wrap);
				o.wrap=wrap;
				var sty=o.wrap.style;
				sty.width = o.sha.w+"px";
				sty.height = o.sha.h+"px";
				sty.border = o.border;
				sty.borderStyle = "dashed";
				sty.borderColor = "red";
				sty.borderRadius = o.borderRadius;
			}
			addBody(o.sha.n);
		}
		var sty=o.sha.n.style;
		sty.position = "absolute";
		sty.left = o.sha.x+"px";
		sty.top = o.sha.y+"px";
		sty.zIndex = 99;
	}
	function _adjust(flag,isEnd){
		return isEnd?flag*data.adjustWidth:0;
	}
	function _getLMPoint(o,flag,isEnd,i){
		var x=o.x+o.w-_wc+_adjust(flag,isEnd)+2*data.borderWidth;
		var y=o.y+o.h/2-_wc;
		return {x:x,y:y};
	}
	function _getRMPoint(o,flag,isEnd,i){
		var x=o.x-_wc+_adjust(flag,isEnd);
		var y=o.y+o.h/2-_wc;
		return {x:x,y:y};
	}
	function _getTMPoint(o,flag,isEnd,i){
		var y=o.y-_wc;
		var x=o.x+o.w/2-_wc+_adjust(flag,isEnd);
		return {x:x,y:y};
	}
	function _getButtonHeight(o){
		if(o.isBranch){
			var len=o.to.length;
			var y=len*(data.buttonHight+data.buttonPadding+2*data.borderWidth);
			return y;
		}else{
			return 0;
		}
	}
	function _getBMPoint(o,flag,isEnd,i){
		var y=o.y+o.h-_wc+_adjust(flag,isEnd);
		var x=o.x+o.w/2-_wc;
		y=y+_getButtonHeight(o);
		return {x:x,y:y};
	}
	function _getLBPoint(o,flag,isEnd,i){
		var x=o.x+o.w-_wc+_adjust(flag,isEnd);
		var y=o.y+o.h-_wc+i*data.buttonHight+(i+1)*data.buttonPadding+(i+1)*2*data.borderWidth+data.buttonHight/2;
		return {x:x,y:y};
	}
	function _getRBPoint(o,flag,isEnd,i){
		var x=o.x-_wc+data.w-data.buttonWidth+_adjust(flag,isEnd);
		var y=o.y+o.h-_wc+i*data.buttonHight+(i+1)*data.buttonPadding+(i+1)*2*data.borderWidth+data.buttonHight/2;
		return {x:x,y:y};
	}
	function drawLine(){
		_each(data.list,function(obj){
			_each(obj.to,function(item,i){
				var oo1=obj;oo2=data.listmap[item.destid];
				if(!oo2) return;
				if(!oo2||oo2.isHidden) return;
				if(obj.isBranch){
					if(oo1.x>(oo2.x+oo2.w)){
						var flag=1;
						var o1=_getRBPoint(oo1,flag,false,i);
						var o2=_getLMPoint(oo2,flag,true,i);
					}else if(oo1.x>oo2.x){
					}else{
						var flag=1;
						var o1=_getLBPoint(oo1,flag,false,i);
						var o2=_getRMPoint(oo2,flag,true,i);
					}
				}else{
					if(oo1.x>(oo2.x+oo2.w)){
						var flag=1;
						var o1=_getRMPoint(oo1,flag,false,i);
						var o2=_getLMPoint(oo2,flag,true,i);
					}else if(oo1.x>oo2.x){
						if(oo1.y>oo2.y){
							var flag=1;
							var o1=_getTMPoint(oo1,flag,false,i);
							var o2=_getBMPoint(oo2,flag,true,i);
						}else{
							var flag=1;
							var o1=_getBMPoint(oo1,flag,false,i);
							var o2=_getTMPoint(oo2,flag,true,i);
						}
					}else{
						var flag=-1;
						var o1=_getLMPoint(oo1,flag,false,i);
						var o2=_getRMPoint(oo2,flag,true,i);
					}
				}
				var node = obj.to[i].nline;
				_drawLine(node,o1,o2);
			});
		});
	}
	function _drawLine(node,o1,o2){
			var s="";
			s=s+"M "+o1.x+","+o1.y+" ";
			var x=(o2.x-o1.x)/2+o1.x;
			s=s+"Q "+x+","+o1.y+" ";
			var y=(o2.y-o1.y)/2+o1.y;
			s=s+" "+x+","+y+" ";
			s=s+"T "+(o2.x)+","+o2.y+" ";
			svg_drawLine(node,s);
	}
	function _adjustPos(o,x,y){
		if(data.isFix&&_is_number(o.houseid)){
			var house=data.containerList[o.houseid];
			var nx=x>house.x?x:house.x;
			var ny=y>house.y?y:house.y;
			var nx=(nx+o.w)<house.x2?nx:(house.x2-o.w);
			var h=o.h+_getButtonHeight(o);
			var ny=(ny+h)<house.y2?ny:(house.y2-h);
			o.x=nx; o.y=ny;
		}else{
			o.x=x; o.y=y;
		}
	}
	function _adjustPosShadow(o,x,y){
		o.sha.x=x; o.sha.y=y;
	}
	function _adjustAutoX(o){
		if(data.isAjustAutoX&&_is_number(o.houseid)){
			var house=data.containerList[o.houseid];
			var x=(house.w)/2-(o.w)/2;
			o.x=house.x+x;
		}
	}
	function _adjustAutoY(o){
		if(data.isAjustAutoY&&_is_number(o.houseid)){
			var house=data.containerList[o.houseid];
			o.y=house.autoy;
			house.autoy=house.autoy+o.h+_getButtonHeight(o)+data.containerPaddingGap;
		}
	}
	function draw(o,x,y){
		_each(data.list,function(obj){
			if(o==obj){
				_adjustPos(o,x,y);
				_drawElement(o);
				if(o.sha){
					_update_sha_pos(o);
					_drawElementShadow(o);
				}
			}
		});
		drawLine();
	}
	function findMix(o){
		var obj=o.sha;
		var oo=null;
		_each(data.list,function(item){
			if(obj.x>item.x && obj.y>item.y && obj.x<(item.x+item.w) && obj.y<(item.y+item.h)){
				oo=item;
			}
		});
		return oo;
	}
	function make_new_line(o){
		var dest=findMix(o);
		if(dest){
			if(o.id!=dest.id){
				if(data.shaSingle){
					o.to=[{destid:dest.id}];
				}else{
					if(_is_array(o.to)){
						var a=o.to;
						var flag=true;
						_each(a,function(item){
							if(item.destid==dest.id){
								flag=false;
							}
						});
						if(flag){
							o.to.push({destid:dest.id});
						}
					}else{
						o.to=[{destid:dest.id}];
					}
				}
			}
		}
	}
	function drawShadow(o,x,y){
		_each(data.list,function(obj){
			if(o==obj){
				_adjustPosShadow(o,x,y);
				_drawElementShadow(obj);
			}
		});
		drawShadowLine(o);
	}
	function drawShadowLine(o){
		if(!o.sha.nline){
			data.zIndex=data.zIndex+1;
			o.sha.nline=_createline();
		}
		var o1=_getLMPoint(o,1,false,1);
		var o2=_getRMPoint(o.sha,1,false,1);
		_drawLine(o.sha.nline,o1,o2);
	}
	function main(){
		destroy();
		init();
	}
	function destroy(){
		var o=_d.getElementById("my");
		o.innerHTML="";
		var s="";
		s+="<svg width='640' height='480'>";
		s+="<defs>";
		s+="<marker id='idArrow' viewBox='0 0 20 20' refX='0' refY='10' markerUnits='strokeWidth' markerWidth='3' markerHeight='10' orient='auto'>";
		s+="<path d='M 0 0 L 20 10 L 0 20 z' fill='#AAA' stroke='#ddd'/>";
		s+="</marker>";
		s+="</defs>";
		s+="<g id='group'></g>";
		s+="</svg>";
		var o=_d.getElementById("mysvg");
		o.innerHTML=s;
		_each(data.list,function(o){
			o.n=null;
			_each(o.to,function(obj){
				obj.nline=null;
			});
		})
		_each(data.containerList,function(o){
			o.n=null;
		})
		data.listmap={};
		data.nTuod=null;
	}
	function init(){
		var x=data.containerMargginX;
		var y=data.containerMargginY;
		var pad=data.containerMargginGap;
		_each(data.containerList,function(o){
			o.w=o.w||data.containerWidth;
			o.h=o.h||data.containerHeight;
			o.y=y;
			o.x=x;
			x=x+o.w+pad;
			_drawContainer(o);
		})
		_each(data.list,function(o){
			data.listmap[o.id]=o;
		})
		_each(data.list,function(o){
			if(o.isHidden) return;
			o.bg=o.bg||data.bg;
			o.lmode=o.lmode||data.lmode;
			o.zIndex=o.zIndex||data.zIndex;
			o.w=o.w||data.w;
			o.h=o.h||data.h;
			o.border=o.border||data.border;
			o.borderRadius=o.borderRadius||data.borderRadius;
			o.isDrag=_is_boolean(o.isDrag)?o.isDrag:data.isDrag;
			if(data.isDragShadow){
				o.isDragShadow=true;
			}else{
				o.isDragShadow=false;
			}
			if(o.to&&!o.lstyle) o.lstyle=data.lstyle;
			_adjustPos(o,o.x,o.y);
			_adjustAutoX(o);
			_adjustAutoY(o);
			_drawElement(o);
			_drag(o);
			if(o.houseid==0){
				if(data.isDragShadow){
					_make_sha_pos(o);
					_drawElementShadow(o);
					_dragShadow(o);
				}
			}
		})
		_each(data.list,function(o){
			if(o.onclick){
				o.n.onclick=o.onclick;
			}
		})
		drawLine();
	}
	function _make_sha_pos(o){
		var sha={x:o.x+o.w,y:o.y,w:data.sha.w,h:data.sha.h};
		sha.x=sha.x-sha.w/2;
		sha.y=sha.y+o.h/2-sha.h/2;
		o.sha=sha;
	}
	function _update_sha_pos(o){
		var sha=o.sha;
		sha.x=o.x+o.w-sha.w/2;
		sha.y=o.y+o.h/2-sha.h/2;
	}
	function svg_drawLine(node,s1,i)
	{
		node.setAttribute("style",data.lstyle);
		node.setAttribute("marker-end","url(#idArrow)");
		node.setAttribute("d",s1);
	}
</script>
</head>
<body>
<div id="my"></div>
<div id="mysvg"></div>
</body>
</html>
<script>
	setTimeout("main()",0);
</script>